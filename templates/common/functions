
#!/bin/bash

function do_ssh() {
    local user_host="$1"
    shift
    local ssh_opts="-o StrictHostKeyChecking=no -o PasswordAuthentication=no"
    local user host ssh_cmd

    # Parse user and host from user_host
    user=$(echo "$user_host" | awk -F@ '{print $1}')
    host=$(echo "$user_host" | awk -F@ '{print $2}')

    # Check if user and host are valid
    if [ -z "$user" ] || [ -z "$host" ]; then
        echo "Error: Invalid user/host: $user_host" >&2
        return 1
    fi

    # Create the ssh command with the given commands
    ssh_cmd="ssh $ssh_opts $user_host \"bash -c '$@'\""

    # Echo the command for debugging
    echo "CMD: $ssh_cmd" >&2

    # Execute the command
    eval $ssh_cmd
    local rc=$?
    return $rc
}


# function to merge 2 resource files
merge_resources() {
    local file1="$1"
    local file2="$2"
    local output="$3"

    python3 <<EOF
import yaml, json

def load_resource(path):
    with open(path) as f:
        return yaml.safe_load(f).get("resources", {})

res1 = load_resource("$file1")
res2 = load_resource("$file2")

combined = {
    "requests": {},
    "limits": {}
}

for res in [res1, res2]:
    if "requests" in res:
        combined["requests"].update(res["requests"])
    if "limits" in res:
        combined["limits"].update(res["limits"])

final = {k: v for k, v in combined.items() if v}

with open("$output", "w") as out:
    out.write('"resources": ' + json.dumps(final, indent=4) + "\n")
EOF
}
# EOF
