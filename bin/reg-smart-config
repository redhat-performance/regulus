#!/usr/bin/env bash
#
# Regulus smart lab.config util
#	1. Check for the required envs i.e KUBECONFIG, REG_KNI_USER, REG_OCPHOST
# 	2. Initialize other env variables that the user has no inputs for. For example,
#		a. OCP_WORKER_0-2
#		b. BM_HOSTS
#		c. REG_SRIOV_NIC, REG_MACVLAN_NIC, REG_DPDK_NIC, MODEL, MTU
#		d. TREX_HOSTS, TREX_SRIOV_INTERFACE_1-2, MODEL, MTU
#  Usage: bash re-config
#
#  Exec context:
#       Can be called after "make init-lab" to fix up lab.config
#       Can be called before "make init-lab" ONLY when crucible controller runs on the bastion
#       CANNOI be called before "make init-lab" when controller is NOT running on bastion. Repo has not been mirrored to the bastion yet.
#
# Logic: if a NIC has SRIOV VFs (owned and configured by something else), or being unknown NIC type, it
#       will not be eligible for DPDK tests.
#
# Limitations: 
#	1. Recognize only XXV710, E810, Cx5 and Cx6 NIC at this moment. For others, it is Just a matter of verifying them.
#

set -e  # Exit on error
source ${REG_ROOT}/lab.config
#source ${REG_ROOT}/templates/common/functions

# About $reg_dir,
# On controller, the user can create REGULUS somewhere under their home i.e /root/path/regulus
# On bastion, the user can be root or kni. Since regulus will clone a repo there. it wil be /home/kni/path/regulus or /root/path/regulus.
# We need to identify the relative path from the bastion user's HOME. That is the "path/regulus" so that we can ssh to the bastion and cd to "path/regulus"
reg_dir="${PWD#"$HOME"/}"
echo reg_dir=$reg_dir >&2

DEST="$REG_KNI_USER@$REG_OCPHOST"
OVN_INTERFACE=""

DEBUG=false
DPRINT() {
    if $DEBUG; then
        local line=$1
        shift
        echo "($line): DEBUG $*"  >&2
    fi
}

INFO() {
	local line=$1
    shift
    echo "($line) INFO: $*"  >&2
}

exit_error() {
    local line=$1
    shift
    echo "($line) [ERROR]: $*"  >&2
    exit 1
}

# locate this script path. We may need to call its support script(s)
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
core_auth_script_path="${script_dir}/core-auth-key.sh"

# In double/netsted usage, we need extra_SSH_OPTS
SSH_OPTS="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR -o ConnectTimeout=20"
SSH_OPTS+="${extra_SSH_OPTS:-}"

function do_ssh() {
    local user_host user host
    user_host=$1; shift
    user=`echo $user_host | awk -F@ '{print $1}'`
    host=`echo $user_host | awk -F@ '{print $2}'`

    if [ -z "$user" ]; then
        exit_error "do_ssh: user was blank: $user_host"
    fi
    if [ -z "$host" ]; then
        exit_error "do_ssh: host was blank: $user_host"
    fi

    # Use here-document to send the script
    ssh $SSH_OPTS $user_host bash << EOFCMD
export KUBECONFIG='${KUBECONFIG}'
$*
EOFCMD
    return $?
}

LAB_CONFIG="lab.config"
INFO $LINENO "Initializing optional variables in $LAB_CONFIG"

# Check if lab.config exists
if [ ! -f "$LAB_CONFIG" ]; then
    exit_error $LINENO "$LAB_CONFIG not found"
fi

# Source the lab.config to get current values
source "$LAB_CONFIG"

# Check required variables
if [ -z "$REG_KNI_USER" ] || [ -z "$REG_OCPHOST" ]  || [[ -z "$KUBECONFIG" ]] ; then
    exit_error $LINENO "Missing required variables. REG_KNI_USER=$REG_KNI_USER REG_OCPHOST=$REG_OCPHOST KUBECONFIG=$KUBECONFIG. All must be set in $LAB_CONFIG"
fi

# Default BM_HOSTS
if [ -z "$BM_HOSTS" ]; then
    BM_HOSTS="${REG_OCPHOST}"
    INFO $LINENO "No BM_HOST. Setting BM_HOSTS=REG_OCPHOST: $REG_OCPHOST"
fi

# Get worker nodes
DPRINT $LINENO "Getting worker nodes..."
WORKER_NODES=$(do_ssh $DEST "oc get nodes -l node-role.kubernetes.io/worker= -o jsonpath='{.items[*].metadata.name}'")
WORKER_NODES=$(echo $WORKER_NODES)  # Remove extra whitespace
WORKER_NODES=($WORKER_NODES)        # Convert to array

if [ ${#WORKER_NODES[@]} -eq 0 ]; then
    exit_error $LINENO "Error: No worker nodes found"
fi
INFO $LINENO "Found ${#WORKER_NODES[@]} worker nodes"

# Update worker node variables
if [ -z "$OCP_WORKER_0" ] && [ ${#WORKER_NODES[@]} -ge 1 ]; then
    OCP_WORKER_0="${WORKER_NODES[0]}"
    DPRINT $LINENO "Setting OCP_WORKER_0=$OCP_WORKER_0"
fi

if [ -z "$OCP_WORKER_1" ] && [ ${#WORKER_NODES[@]} -ge 2 ]; then
    OCP_WORKER_1="${WORKER_NODES[1]}"
    DPRINT $LINENO "Setting OCP_WORKER_1=$OCP_WORKER_1"
fi

if [ -z "$OCP_WORKER_2" ] && [ ${#WORKER_NODES[@]} -ge 3 ]; then
    OCP_WORKER_2="${WORKER_NODES[2]}"
    DPRINT $LINENO "Setting OCP_WORKER_2=$OCP_WORKER_2"
fi

# Function to get node IP address
get_node_ip() {
    local node=$1
    DPRINT $LINENO "Getting IP address for node $node..."
    # we may have both ipv4 and v6 if dual stack. Take ipv4
    # local ip=$(do_ssh $DEST "oc get node $node -o json | jq -r '.status.addresses[] | select(.type=="InternalIP" and (.address | test("^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$"))) | .address'")

    local jq_cmd='.status.addresses[] | select(.type=="InternalIP") | .address | select(contains("."))'
    local ip=$(do_ssh $DEST "oc get node $node -o json | jq -r '$jq_cmd'")
    if [ -z "$ip" ]; then
        exit_error $LINENO "Could not get IP address for node $node"
    fi
    DPRINT $LINENO "IP address for $node: $ip"
    echo "$ip"
}

# Function to get OVN interface
get_ovn_interface() {
    local node_ip=$1
    DPRINT $LINENO "Getting OVN interface for node IP $node_ip..."
    local ovn_interface=$(do_ssh  $DEST "ssh $SSH_OPTS core@$node_ip" "nmcli | grep ovs-port-phys0 | awk '{print \$1}' | tr -d ':'")
    INFO $LINENO "OVN interface for node IP $node_ip: $ovn_interface"
    echo "$ovn_interface"
}

dpdk_acceptable() {
    local model=$1
    
    case "$model" in
        CX7|CX8|CX6|E810|E820|XXV710)
            return 0  # true
            ;;
        *)
            return 1  # false
            ;;
    esac
}

macvlan_mtu_check() {
    # cannot be larger than PF
    local node_ip=$1
    local nic=$2
    local mtu=$3

    local pf_mtu=$(do_ssh  $DEST "ssh $SSH_OPTS core@$node_ip" "cat /sys/class/net/$nic/mtu")
    if [ "${pf_mtu}" -ge "${mtu}" ] 2>/dev/null; then
        return 0
    else
        echo "($LINENO)" "INFO: $nic MTU is $pf_mtu. User may consider other mtu i.e. 9000"
        return 1
    fi
}

# Configure main env's i.e. SRIOV,MACVLAN and DPDK NICs 
configure_main() {
  if [ ! -z "$OCP_WORKER_0" ]; then
    WORKER_IP=$(get_node_ip "$OCP_WORKER_0")

    DPRINT $LINENO "CMD: $core_auth_script_path $OCP_WORKER..."
    do_ssh $DEST "cd $reg_dir && bash bin/core-auth-key.sh $OCP_WORKER_0  ~/.ssh/id_rsa.pub }"

    
    if [ ! -z "$WORKER_IP" ]; then
        DPRINT $LINENO "Testing SSH: do_ssh  core@$WORKER_IP..."
        if do_ssh $DEST "ssh $SSH_OPTS core@$WORKER_IP" "echo 'SSH connection successful'" >/dev/null 2>&1; then
            OVN_INTERFACE=$(get_ovn_interface "$WORKER_IP")
            INFO $LINENO "OVN_INTERFACE=$OVN_INTERFACE"
            
            # Get all available NICs that aren't the OVN interface
            #  When using our do_ssh function with complex nested SSH commands, 
            #  it's better to combine everything into one argument using single quotes, 
            #  rather than passing multiple arguments that the function has to concatenate with $*.
            local available_nics=$(do_ssh $DEST "ssh $SSH_OPTS core@$WORKER_IP 'cat > /tmp/get_nics.sh << \"EOFSCRIPT\"
  for nic in /sys/class/net/*; do
  [[ ! -e \$nic ]] && continue
  nic_name=\$(basename \$nic)
  [[ \$nic_name == lo ]] && continue
  #[[ \$nic_name == '${OVN_INTERFACE}' ]] && continue
  if [[ -L \$nic ]]; then
      link_target=\$(readlink \$nic)
     [[ \$link_target == *virtual* ]] && continue
  fi
  [[ -d \$nic/device/physfn ]] && continue
  [[ ! -d \$nic/device ]] && continue
  echo \$nic_name
  done
EOFSCRIPT
bash /tmp/get_nics.sh && rm -f /tmp/get_nics.sh'")

            INFO $LINENO "Available NICs: $(echo "$available_nics" | tr '\n' ' ')"
            
            # Map of NIC info
            declare -A nic_drivers
            declare -A nic_models
            declare -A nic_has_sriov
            declare -A nic_mtu
            
            for nic in $available_nics; do
                # Get driver
                local driver=$(do_ssh $DEST "ssh $SSH_OPTS core@$WORKER_IP" "basename \$(readlink -f /sys/class/net/$nic/device/driver) 2>/dev/null || echo 'unknown'")
                nic_drivers[$nic]=$driver
                
                # Get device path and PCI address - extract the last PCI address from the path
                local device_path=$(do_ssh $DEST "ssh $SSH_OPTS core@$WORKER_IP" "readlink -f /sys/class/net/$nic/device")
                local pci_addr=$(echo "$device_path" | grep -o "[0-9a-f]\{4\}:[0-9a-f]\{2\}:[0-9a-f]\{2\}\.[0-9a-f]" | tail -1)
                
                DPRINT $LINENO "NIC $nic - device path: $device_path, PCI address: $pci_addr"
                
                # Determine model using lspci - We limit our interests to known models: XXV710, E810, CX5 and CX6.
                local model="unknown"
                if [ ! -z "$pci_addr" ]; then
                    local lspci_info=$(do_ssh  $DEST "ssh $SSH_OPTS core@$WORKER_IP" "lspci -s \"$pci_addr\" -v 2>/dev/null || echo 'unknown'")
                    DPRINT $LINENO "lspci info for $nic ($pci_addr): $(echo "$lspci_info" | head -1)"
                    
                    # Check model based on lspci output
                    if echo "$lspci_info" | grep -q -i "XXV710"; then
                        model="XXV710"
                    elif echo "$lspci_info" | grep -q -i "E810"; then
                        model="E810"
                    elif echo "$lspci_info" | grep -q -i "ConnectX-5"; then
                        model="CX5"
                    elif echo "$lspci_info" | grep -q -i "ConnectX-6"; then
                        model="CX6"
                    elif echo "$lspci_info" | grep -q -i "ConnectX-7"; then
                        model="CX7"
                    elif echo "$lspci_info" | grep -q -i "Mellanox.*Connect"; then
                        if [ "$driver" == "mlx5_core" ]; then
                            model="CX5"  # Default to CX5 for Mellanox with mlx5_core
                        fi
                    else
                        model="$(echo "$lspci_info" | grep 'Kernel driver in use' | awk -F': ' '{print $2}')"
                    fi
                fi
                nic_models[$nic]=$model
                DPRINT $LINENO "Recording $nic as  $model"
                
                # Check if SRIOV is configured - I don't want to touch NICs with VFs configured by other test(s) ran before me.
                local sriov_numvfs=$(do_ssh $DEST "ssh $SSH_OPTS core@$WORKER_IP" "cat /sys/class/net/$nic/device/sriov_numvfs 2>/dev/null || echo '0'")
                if [[ "$sriov_numvfs" == "0" ]]; then
                    nic_has_sriov[$nic]="no"
                else
                    nic_has_sriov[$nic]="yes"
                fi
                # get mtu
                local nic_mtu[$nic]=$(do_ssh $DEST "ssh $SSH_OPTS core@$WORKER_IP" "cat /sys/class/net/$nic/mtu")
                
                DPRINT $LINENO "NIC $nic - driver: $driver, model: $model, SRIOV configured: ${nic_has_sriov[$nic]}  MTU  ${nic_mtu[$nic]}"
            done

			# Print header
			printf "%-12s %-14s %-14s %-8s\n" "NIC" "Model" "SRIOV exists"   "MTU"
			printf "%-12s %-14s %-14s %-8s\n" "------------" "--------------" "------------"  "----------"
			# Print each NIC's info
            for nic in $available_nics; do
                if [ "$nic" == "${OVN_INTERFACE}" ] ; then
                   printf "%-12s %-14s %-14s %-8s\n" \
                    "$nic" \
                    "${nic_models[$nic]:-UNKNOWN}" \
                    "OVN main" \
                    "${nic_mtu[$nic]}" 
                else
                  printf "%-12s %-14s %-14s %-8s\n" \
                    "$nic" \
                    "${nic_models[$nic]:-UNKNOWN}" \
                    "${nic_has_sriov[$nic]:-UNKNOWN}" \
                    "${nic_mtu[$nic]}" 
                fi
            done

            
            local sriov_nic=""
            local sriov_model=""
            if [ !  -z "$REG_SRIOV_NIC" ]; then
                # user-defined REG_SRIOV_NIC, checkit and WARN but let it continue. The user knows more than us.
                DPRINT $LINENO "check user-defined REG_SRIOV_NIC=$REG_SRIOV_NIC"
                if ! dpdk_acceptable "${nic_models[$REG_SRIOV_NIC]}" || [[ "${nic_has_sriov[$REG_SRIOV_NIC]}" == "yes" ]]; then
                    DPRINT $LINENO "WARN REG_SRIOV_NIC=$REG_SRIOV_NIC is not acceptable model or has SRIOV configured"
                else
                    DPRINT $LINENO "$REG_SRIOV_NIC is suitable for SRIOV"
                    sriov_nic=$REG_SRIOV_NIC
                    sriov_model=${nic_models[$REG_SRIOV_NIC]}
                fi
            else
                # Not defined. Find a suitable SRIOV NIC (first one without SRIOV configured)
                for nic in $available_nics; do
                    [[ "$nic"  == "${OVN_INTERFACE}" ]] && continue
                    if dpdk_acceptable "${nic_models[$nic]}" && [[ "${nic_has_sriov[$nic]}" == "no" ]]; then
                        sriov_nic=$nic
                        sriov_model=${nic_models[$nic]}
                        INFO $LINENO "Found suitable SRIOV NIC: $sriov_nic ($sriov_model)"
                        # we choose the nic, thus we set the NIC model. just in case its user-defined value is wrong.
                        REG_SRIOV_NIC_MODEL="$sriov_model"
                        break
                    fi
                done
            fi
            
            # Set SRIOV and MACVLAN NICs to the same NIC if found
            DPRINT $LINENO "use $sriov_nic and $sriov_model"
            if [ -n "$sriov_nic" ] && [ -n "$sriov_model" ]; then
                # Set SRIOV NIC
                if [ -z "$REG_SRIOV_NIC" ]; then
                    REG_SRIOV_NIC="$sriov_nic"
                fi
                # Set MTU if not already set
                if [ -z "$REG_SRIOV_MTU" ]; then
                    REG_SRIOV_MTU="9000"
                fi
                    
                # Set NIC model if not already set
                if [ -z "$REG_SRIOV_NIC_MODEL" ]; then
                    REG_SRIOV_NIC_MODEL="$sriov_model"
                else
                    if [ "$REG_SRIOV_NIC_MODEL" !=  "$sriov_model"  ] ; then
                        echo "($LINENO)" "WARN: user-defined REG_SRIOV_NIC_MODEL=$REG_SRIOV_NIC_MODEL is incorrect. $sriov_model perhaps "
                    fi
                fi

                # Set MACVLAN NIC to the same as SRIOV NIC
                if [ -z "$REG_MACVLAN_NIC" ]; then
                    INFO $LINENO "Use SRIOV NIC $REG_SRIOV_NIC for MACVLAN NIC"
                    REG_MACVLAN_NIC="$sriov_nic"
                    DPRINT $LINENO "Setting REG_MACVLAN_NIC=$REG_MACVLAN_NIC (same as SRIOV)"
                fi
                # Set macvlan MTU if not already set
                # 1. if user-defined check, warn and auto correct.
                # 2. if no user-defined. try mtu=9000. If not valid, auto correct to current mtu
                if [ !  -z "$REG_MACVLAN_MTU" ]; then
                    INFO $LINENO "validate macvlan user-define mtu=$REG_MACVLAN_MTU on $REG_MACVLAN_NIC"
                    if ! macvlan_mtu_check "$WORKER_IP" "$REG_MACVLAN_NIC" "$REG_MACVLAN_MTU"; then
                        echo "($LINENO) WARN: macvlan user-defined mtu=$REG_MACVLAN_MTU greater than ${nic_mtu[$REG_MACVLAN_NIC]}"
                        REG_MACVLAN_MTU=${nic_mtu[$REG_MACVLAN_NIC]}
                        echo "($LINENO) WARN: auto correction,  macvlan mtu=$REG_MACVLAN_MTU"
                    fi
                else
                    REG_MACVLAN_MTU="9000"
                    if  ! macvlan_mtu_check "$WORKER_IP" "$REG_MACVLAN_NIC" "9000"; then
                        REG_MACVLAN_MTU=${nic_mtu[$REG_MACVLAN_NIC]}
                        INFO $LINENO "set macvlan mtu=$REG_MACVLAN_MTU on $REG_MACVLAN_NIC"
                    fi
                fi

            else
                DPRINT $LINENO "No suitable NIC found for SRIOV or MACVLAN"
            fi

            if [ "${REG_SRIOV_MTU}" != "${REG_MACVLAN_MTU}"  ]; then
                echo "($LINENO)" "WARN: REG_SRIOV_MTU=${REG_SRIOV_MTU} REG_MACVLAN_MTU=${REG_MACVLAN_MTU}" 
            fi
            
            # For DPDK, find two NICs of the same type if available
            if [ -z "$REG_DPDK_NIC_1" ] || [ -z "$REG_DPDK_NIC_2" ]; then
                DPRINT $LINENO "Finding suitable NICs for DPDK..."
                
                # Try to find pairs of NICs with the same model
                declare -A model_count
                declare -A model_nics
                
                # Count NICs of each model and keep track of them
                for nic in $available_nics; do
                    [[ "$nic"  == "${OVN_INTERFACE}" ]] && continue
                    local model=${nic_models[$nic]}
                    DPRINT $LINENO "For DPDK, examine $nic of model ${model} has SRIOV ${nic_has_sriov[$nic]}"
                    if dpdk_acceptable "$model" && [[ "${nic_has_sriov[$nic]}" == "no" ]]; then
                        # Increment count for this model
                        if [ -z "${model_count[$model]}" ]; then
                            model_count[$model]=1
                            model_nics[$model]="$nic"
                            DPRINT $LINENO "For DPDK, found $nic ${model_count[$model]} NICs of model $model"
                        else
                            model_count[$model]=$((${model_count[$model]} + 1))
                            model_nics[$model]="${model_nics[$model]} $nic"
                            DPRINT $LINENO "For DPFK, found $nic ${model_count[$model]} NICs of model $model"
                        fi
                    else 
                        DPRINT $LINENO "For DPDK, skip $nic of model ${model_nics[$model]} "
                    fi
                done
                
                # Find a model with at least 2 NICs
                local dpdk_model=""
                local dpdk_nics=""
                
                for model in "${!model_count[@]}"; do
                    if [ ${model_count[$model]} -ge 2 ]; then
                        dpdk_model=$model
                        dpdk_nics=${model_nics[$model]}
                        DPRINT $LINENO "For DPDK, total found ${model_count[$model]} NICs of model $model"
                        break
                    fi
                done
                
                # If we found a model with at least 2 NICs, use them for DPDK
                if [ -n "$dpdk_model" ] && [ -n "$dpdk_nics" ]; then
                    # Get the first two NICs of this model
                    dpdk_nic_1=$(echo "$dpdk_nics" | awk '{print $1}')
                    dpdk_nic_2=$(echo "$dpdk_nics" | awk '{print $2}')
                    
                    if [ -z "$REG_DPDK_NIC_1" ]; then
                        REG_DPDK_NIC_1="$dpdk_nic_1"
                        DPRINT $LINENO "Setting REG_DPDK_NIC_1=$REG_DPDK_NIC_1"
                    fi
                    
                    if [ -z "$REG_DPDK_NIC_2" ]; then
                        REG_DPDK_NIC_2="$dpdk_nic_2"
                        DPRINT $LINENO "Setting REG_DPDK_NIC_2=$REG_DPDK_NIC_2"
                    fi
                    
                    # Set DPDK NIC model if not already set
                    if [ -z "$REG_DPDK_NIC_MODEL" ]; then
                        REG_DPDK_NIC_MODEL="$dpdk_model"
                        DPRINT $LINENO "Setting REG_DPDK_NIC_MODEL=$REG_DPDK_NIC_MODEL"
                    fi
                else
                    INFO $LINENO "For DPDK: warning could not find two eligible NICs of the same model"
                    # Tip for remove VFs: oc delete sriovnetworknodepolicy -n openshift-sriov-network-operator --all
                fi
            fi
        else
            exit_error $LINENO "Could not SSH to worker node IP $WORKER_IP"
        fi
    else
        exit_error $LINENO "Could not get IP address for worker node $OCP_WORKER_0"
    fi
fi

}

configure_main

# Configure TREX envs
configure_trex() {
    DPRINT $LINENO "Configuring TREX settings..."
    
    # Set TREX_HOSTS to BM_HOSTS if not defined
    if [ -z "$TREX_HOSTS" ]; then
        TREX_HOSTS="$BM_HOSTS"
        DPRINT $LINENO "Setting TREX_HOSTS=$TREX_HOSTS"
    fi
    
    # Use SRIOV interfaces for TREX if not defined
    if [ -z "$TREX_SRIOV_INTERFACE_1" ] && [ -n "$REG_DPDK_NIC_1" ]; then
        TREX_SRIOV_INTERFACE_1="$REG_DPDK_NIC_1"
        DPRINT $LINENO "Setting TREX_SRIOV_INTERFACE_1=$TREX_SRIOV_INTERFACE_1"
    fi
    
    if [ -z "$TREX_SRIOV_INTERFACE_2" ] && [ -n "$REG_DPDK_NIC_2" ]; then
        TREX_SRIOV_INTERFACE_2="$REG_DPDK_NIC_2"
        DPRINT $LINENO "Setting TREX_SRIOV_INTERFACE_2=$TREX_SRIOV_INTERFACE_2"
    fi
    # Set TREX DPDK model to match our DPDK NIC model
    if [ -z "$TREX_DPDK_NIC_MODEL" ] && [ -n "$REG_DPDK_NIC_MODEL" ]; then
        TREX_DPDK_NIC_MODEL="$REG_DPDK_NIC_MODEL"
        DPRINT $LINENO "Setting TREX_DPDK_NIC_MODEL=$TREX_DPDK_NIC_MODEL"
    fi

    # Set auto initialize DPDK remote host
    if [ -z "$REM_DPDK_CONFIG" ] && [ -n "$REG_DPDK_NIC_MODEL" ]; then
        REM_DPDK_CONFIG="false"
        DPRINT $LINENO "Setting REM_DPDK_CONFIG=$REM_DPDK_CONFIG"
    fi

}

configure_trex

# Update lab.config file
DPRINT $LINENO "Updating $LAB_CONFIG..."

# Create backup
cp "$LAB_CONFIG" "${LAB_CONFIG}.bak"

# Function to update or add a variable in the config file. Also prefix with "export" if not already there.
update_config_var() {
    local var_name="$1"
    local var_value="$2"
    local config_file="$3"

    INFO $LINENO "Updating $var_name to \"$var_value\""

    # Check if variable exists in the file
    if grep -q "^[[:space:]]*export[[:space:]]\+$var_name[[:space:]]*=" "$config_file"; then
        # Variable exists with export, update it
        sed -i "s|^[[:space:]]*export[[:space:]]\+$var_name[[:space:]]*=.*|export $var_name=\"$var_value\"|" "$config_file"
    elif grep -q "^[[:space:]]*$var_name[[:space:]]*=" "$config_file"; then
        # Variable exists without export, update it to include export
        sed -i "s|^[[:space:]]*$var_name[[:space:]]*=.*|export $var_name=\"$var_value\"|" "$config_file"
    else
        # Variable doesn't exist, add it with export
        echo "export $var_name=\"$var_value\"" >> "$config_file"
    fi
}


{ cat <<EOF
# This file was completed by reg-smart-config
# 
EOF
cat ./lab.config; } > ./lab.config.new && mv ./lab.config.new ./lab.config

# Update all variables
update_config_var "KUBECONFIG" "$KUBECONFIG" "$LAB_CONFIG"
update_config_var "REG_KNI_USER" "$REG_KNI_USER" "$LAB_CONFIG"
update_config_var "REG_OCPHOST" "$REG_OCPHOST" "$LAB_CONFIG"
update_config_var "REG_DP" "$REG_DP" "$LAB_CONFIG"
update_config_var "BM_HOSTS" "$BM_HOSTS" "$LAB_CONFIG"
update_config_var "OCP_WORKER_0" "$OCP_WORKER_0" "$LAB_CONFIG"
update_config_var "OCP_WORKER_1" "$OCP_WORKER_1" "$LAB_CONFIG"
update_config_var "OCP_WORKER_2" "$OCP_WORKER_2" "$LAB_CONFIG"
update_config_var "REG_SRIOV_NIC" "$REG_SRIOV_NIC" "$LAB_CONFIG"
update_config_var "REG_SRIOV_MTU" "$REG_SRIOV_MTU" "$LAB_CONFIG"
update_config_var "REG_SRIOV_NIC_MODEL" "$REG_SRIOV_NIC_MODEL" "$LAB_CONFIG"
update_config_var "REG_MACVLAN_NIC" "$REG_MACVLAN_NIC" "$LAB_CONFIG"
update_config_var "REG_MACVLAN_MTU" "$REG_MACVLAN_MTU" "$LAB_CONFIG"
update_config_var "REG_DPDK_NIC_1" "$REG_DPDK_NIC_1" "$LAB_CONFIG"
update_config_var "REG_DPDK_NIC_2" "$REG_DPDK_NIC_2" "$LAB_CONFIG"
update_config_var "REG_DPDK_NIC_MODEL" "$REG_DPDK_NIC_MODEL" "$LAB_CONFIG"
update_config_var "TREX_HOSTS" "$TREX_HOSTS" "$LAB_CONFIG"
update_config_var "TREX_SRIOV_INTERFACE_1" "$TREX_SRIOV_INTERFACE_1" "$LAB_CONFIG"
update_config_var "TREX_SRIOV_INTERFACE_2" "$TREX_SRIOV_INTERFACE_2" "$LAB_CONFIG"
update_config_var "TREX_DPDK_NIC_MODEL" "$TREX_DPDK_NIC_MODEL" "$LAB_CONFIG"
update_config_var "REM_DPDK_CONFIG" "false" "$LAB_CONFIG"

DPRINT $LINENO "Updated $LAB_CONFIG successfully. Backup saved as ${LAB_CONFIG}.bak"

#EOF

