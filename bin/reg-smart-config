#!/usr/bin/env bash
#
# Regulus smart lab.config util
#	1. Check for the required envs i.e KUBECONFIG, REG_KNI_USER, REG_OCPHOST
# 	2. Initialize other env variables that the user has no inputs for. For example,
#		a. OCP_WORKER_0-2
#		b. BM_HOSTS
#		c. REG_SRIOV_NIC, REG_MACVLAN_NIC, REG_DPDK_NIC, MODEL, MTU
#		d. TREX_HOSTS, TREX_SRIOV_INTERFACE_1-2, MODEL, MTU
#
# Logic: if a NIC has SRIOV VFs (owned and configured by something else), or being unknown NIC type, it
#       will not be eligible for DPDK tests.
#
# Limitations: 
#	1. Recognize only XXV710, E810, Cx5 and Cx6 NIC at this moment. For others, it is Just a matter of verifying them.
#

set -e  # Exit on error


DEBUG=false
DPRINT() {
    if $DEBUG; then
        local line=$1
        shift
        echo "($line): DEBUG $*"  >&2
    fi
}

INFO() {
	local line=$1
    shift
    echo "($line) INFO: $*"  >&2
}

exit_error() {
    local line=$1
    shift
    echo "($line) [ERROR]: $*"  >&2
    exit 1
}

# In double/netsted usage, we need extra_SSH_OPTS
SSH_OPTS="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR -o ConnectTimeout=20"
SSH_OPTS+="${extra_SSH_OPTS:-}"

function do_ssh() {
    local user_host user host
    user_host=$1; shift
    user=`echo $user_host | awk -F@ '{print $1}'`
    host=`echo $user_host | awk -F@ '{print $2}'`

    if [ -z "$user" ]; then
        exit_error "do_ssh: user was blank: $user_host"
    fi
    if [ -z "$host" ]; then
        exit_error "do_ssh: host was blank: $user_host"
    fi

    # Use here-document to send the script
    ssh $SSH_OPTS $user_host bash << EOFCMD
export KUBECONFIG='${KUBECONFIG}'
$*
EOFCMD
    return $?
}

LAB_CONFIG="lab.config"
INFO $LINENO "Initializing optional variables in $LAB_CONFIG"

# Check if lab.config exists
if [ ! -f "$LAB_CONFIG" ]; then
    exit_error $LINENO "$LAB_CONFIG not found"
fi

# Source the lab.config to get current values
source "$LAB_CONFIG"

# Check required variables
if [ -z "$REG_KNI_USER" ] || [ -z "$REG_OCPHOST" ]  || [[ -z "$KUBECONFIG" ]] ; then
    exit_error $LINENO "Missing required variables. REG_KNI_USER=$REG_KNI_USER REG_OCPHOST=$REG_OCPHOST KUBECONFIG=$KUBECONFIG. All must be set in $LAB_CONFIG"
fi

# Default BM_HOSTS
if [ -z "$BM_HOSTS" ]; then
    BM_HOSTS="${REG_OCPHOST}"
    INFO $LINENO "No BM_HOST. Setting BM_HOSTS=REG_OCPHOST: $REG_OCPHOST"
fi

# Get worker nodes
DPRINT $LINENO "Getting worker nodes..."
WORKER_NODES=($(oc get nodes -l node-role.kubernetes.io/worker= -o jsonpath='{.items[*].metadata.name}'))

if [ ${#WORKER_NODES[@]} -eq 0 ]; then
    exit_error $LINENO "Error: No worker nodes found"
fi
INFO $LINENO "Found ${#WORKER_NODES[@]} worker nodes: ${WORKER_NODES[*]}"

# Update worker node variables
if [ -z "$OCP_WORKER_0" ] && [ ${#WORKER_NODES[@]} -ge 1 ]; then
    OCP_WORKER_0="${WORKER_NODES[0]}"
    DPRINT $LINENO "Setting OCP_WORKER_0=$OCP_WORKER_0"
fi

if [ -z "$OCP_WORKER_1" ] && [ ${#WORKER_NODES[@]} -ge 2 ]; then
    OCP_WORKER_1="${WORKER_NODES[1]}"
    DPRINT $LINENO "Setting OCP_WORKER_1=$OCP_WORKER_1"
fi

if [ -z "$OCP_WORKER_2" ] && [ ${#WORKER_NODES[@]} -ge 3 ]; then
    OCP_WORKER_2="${WORKER_NODES[2]}"
    DPRINT $LINENO "Setting OCP_WORKER_2=$OCP_WORKER_2"
fi

# Function to get node IP address
get_node_ip() {
    local node=$1
    DPRINT $LINENO "Getting IP address for node $node..."
    # we may have both ipv4 and v5 if dual stack. Take ipv4
    local ip=$(oc get node $node -o json | jq -r '.status.addresses[] | select(.type=="InternalIP" and (.address | test("^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$"))) | .address')
    if [ -z "$ip" ]; then
        exit_error $LINENO "Could not get IP address for node $node"
    fi
    DPRINT $LINENO "IP address for $node: $ip"
    echo "$ip"
}

# Function to get OVN interface
get_ovn_interface() {
    local node_ip=$1
    DPRINT $LINENO "Getting OVN interface for node IP $node_ip..."
    local ovn_interface=$(do_ssh  "core@$node_ip" "nmcli | grep ovs-port-phys0 | awk '{print \$1}' | tr -d ':'")
    INFO $LINENO "OVN interface for node IP $node_ip: $ovn_interface"
    echo "$ovn_interface"
}

# Method 1: Check for physfn directory (most reliable)
# VF devices have a 'physfn' directory that points to their physical function

# Configure main env's i.e. SRIOV,MACVLAN and DPDK NICs 
configure_main() {
if [ ! -z "$OCP_WORKER_0" ]; then
    WORKER_IP=$(get_node_ip "$OCP_WORKER_0")
    
    if [ ! -z "$WORKER_IP" ]; then
        DPRINT $LINENO "Testing SSH: do_ssh  core@$WORKER_IP..."
        if do_ssh "core@$WORKER_IP" "echo 'SSH connection successful'" >/dev/null 2>&1; then
            OVN_INTERFACE=$(get_ovn_interface "$WORKER_IP")
            INFO $LINENO "OVN_INTERFACE=$OVN_INTERFACE"
            
            # Get all available NICs that aren't the OVN interface
            #local available_nics=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -o BatchMode=yes "core@$WORKER_IP" "find /sys/class/net -type l -not -lname '*virtual*' -exec basename {} \; | grep -v 'lo' | grep -v '$OVN_INTERFACE'")

            local available_nics=$(do_ssh "core@$WORKER_IP" "
cat > /tmp/get_nics.sh << 'EOFSCRIPT'
 for nic in /sys/class/net/*; do
  [[ ! -e \$nic ]] && continue
  nic_name=\$(basename \$nic)
  [[ \$nic_name == lo ]] && continue
  [[ \$nic_name == '${OVN_INTERFACE}' ]] && continue
  if [[ -L \$nic ]]; then
      link_target=\$(readlink \$nic)
     [[ \$link_target == *virtual* ]] && continue
  fi
  [[ -d \$nic/device/physfn ]] && continue
  [[ ! -d \$nic/device ]] && continue
  echo \$nic_name
  done
EOFSCRIPT
bash /tmp/get_nics.sh && rm -f /tmp/get_nics.sh
")

            INFO $LINENO "Available NICs (excluding OVN): $(echo "$available_nics" | tr '\n' ' ')"
            
            # Map of NIC info
            declare -A nic_drivers
            declare -A nic_models
            declare -A nic_has_sriov
            
            for nic in $available_nics; do
                # Get driver
                local driver=$(do_ssh "core@$WORKER_IP" "basename \$(readlink -f /sys/class/net/$nic/device/driver) 2>/dev/null || echo 'unknown'")
                nic_drivers[$nic]=$driver
                
                # Get device path and PCI address - extract the last PCI address from the path
                local device_path=$(do_ssh "core@$WORKER_IP" "readlink -f /sys/class/net/$nic/device")
                local pci_addr=$(echo "$device_path" | grep -o "[0-9a-f]\{4\}:[0-9a-f]\{2\}:[0-9a-f]\{2\}\.[0-9a-f]" | tail -1)
                
                DPRINT $LINENO "NIC $nic - device path: $device_path, PCI address: $pci_addr"
                
                # Determine model using lspci - We limit our interests to known models: XXV710, E810, CX5 and CX6.
                local model="unknown"
                if [ ! -z "$pci_addr" ]; then
                    local lspci_info=$(do_ssh  "core@$WORKER_IP" "lspci -s \"$pci_addr\" -v 2>/dev/null || echo 'unknown'")
                    DPRINT $LINENO "lspci info for $nic ($pci_addr): $(echo "$lspci_info" | head -1)"
                    
                    # Check model based on lspci output
                    if echo "$lspci_info" | grep -q -i "XXV710"; then
                        model="XXV710"
                    elif echo "$lspci_info" | grep -q -i "E810"; then
                        model="E810"
                    elif echo "$lspci_info" | grep -q -i "ConnectX-5"; then
                        model="CX5"
                    elif echo "$lspci_info" | grep -q -i "ConnectX-6"; then
                        model="CX6"
                    elif echo "$lspci_info" | grep -q -i "ConnectX-7"; then
                        model="CX7"
                    elif echo "$lspci_info" | grep -q -i "Mellanox.*Connect"; then
                        if [ "$driver" == "mlx5_core" ]; then
                            model="CX5"  # Default to CX5 for Mellanox with mlx5_core
                        fi
                    fi
                fi
                nic_models[$nic]=$model
                DPRINT $LINENO "Recording $nic as  $model"
                
                # Check if SRIOV is configured - I don't want to touch NICs with VFs configured by other test(s) ran before me.
                local sriov_numvfs=$(do_ssh "core@$WORKER_IP" "cat /sys/class/net/$nic/device/sriov_numvfs 2>/dev/null || echo '0'")
                if [[ "$sriov_numvfs" == "0" ]]; then
                    nic_has_sriov[$nic]="no"
                else
                    nic_has_sriov[$nic]="yes"
                fi
                
                DPRINT $LINENO "NIC $nic - driver: $driver, model: $model, SRIOV configured: ${nic_has_sriov[$nic]}"
            done

			# Print header
			printf "%-12s %-20s %-8s\n" "NIC" "Model" "SRIOV exists"
			printf "%-12s %-20s %-8s\n" "------------" "--------------------" "------------"
			# Print each NIC's info
            for nic in $available_nics; do
                printf "%-12s %-20s %-8s\n" \
                    "$nic" \
                    "${nic_models[$nic]:-UNKNOWN}" \
                    "${nic_has_sriov[$nic]:-UNKNOWN}"
            done
            printf "%-12s %-20s %-8s\n"  "$OVN_INTERFACE"  ""  "OVN main"

            
            # Find a suitable SRIOV NIC (first one without SRIOV configured)
            local sriov_nic=""
            local sriov_model=""
            
            for nic in $available_nics; do
                if [[ "${nic_models[$nic]}" != "unknown" ]] && [[ "${nic_has_sriov[$nic]}" == "no" ]]; then
                    sriov_nic=$nic
                    sriov_model=${nic_models[$nic]}
                    DPRINT $LINENO "Found suitable SRIOV NIC: $sriov_nic ($sriov_model)"
                    break
                fi
            done
            
            # Set SRIOV and MACVLAN NICs to the same NIC if found
            if [ -n "$sriov_nic" ] && [ -n "$sriov_model" ]; then
                # Set SRIOV NIC
                if [ -z "$REG_SRIOV_NIC" ]; then
                    REG_SRIOV_NIC="$sriov_nic"
                    DPRINT $LINENO "Setting REG_SRIOV_NIC=$REG_SRIOV_NIC"
                    
                    # Set MTU if not already set
                    if [ -z "$REG_SRIOV_MTU" ]; then
                        REG_SRIOV_MTU="9000"
                        DPRINT $LINENO "Setting REG_SRIOV_MTU=$REG_SRIOV_MTU"
                    fi
                    
                    # Set NIC model if not already set
                    if [ -z "$REG_SRIOV_NIC_MODEL" ]; then
                        REG_SRIOV_NIC_MODEL="$sriov_model"
                        DPRINT $LINENO "Setting REG_SRIOV_NIC_MODEL=$REG_SRIOV_NIC_MODEL"
                    fi
                fi
                
                # Set MACVLAN NIC to the same as SRIOV NIC
                if [ -z "$REG_MACVLAN_NIC" ]; then
                    REG_MACVLAN_NIC="$sriov_nic"
                    DPRINT $LINENO "Setting REG_MACVLAN_NIC=$REG_MACVLAN_NIC (same as SRIOV)"
                    
                    # Set MTU if not already set
                    if [ -z "$REG_MACVLAN_MTU" ]; then
                        REG_MACVLAN_MTU="9000"
                        DPRINT $LINENO "Setting REG_MACVLAN_MTU=$REG_MACVLAN_MTU"
                    fi
                fi
            else
                DPRINT $LINENO "No suitable NIC found for SRIOV or MACVLAN"
            fi
            
            # For DPDK, find two NICs of the same type if available
            if [ -z "$REG_DPDK_NIC_1" ] || [ -z "$REG_DPDK_NIC_2" ]; then
                DPRINT $LINENO "Finding suitable NICs for DPDK..."
                
                # Try to find pairs of NICs with the same model
                declare -A model_count
                declare -A model_nics
                
                # Count NICs of each model and keep track of them
                for nic in $available_nics; do
                    local model=${nic_models[$nic]}
                    DPRINT $LINENO "For DPDK, examine $nic of model ${model} has SRIOV ${nic_has_sriov[$nic]}"
                    #if [[ "$model" != "unknown" ]] && [[ "${nic_has_sriov[$nic]}" == "no" ]]; then
                    if [[ "$model" != "unknown" ]] && [[ "${nic_has_sriov[$nic]}" == "no" ]]; then
                        # Increment count for this model
                        if [ -z "${model_count[$model]}" ]; then
                            model_count[$model]=1
                            model_nics[$model]="$nic"
                            DPRINT $LINENO "For DPDK, found $nic ${model_count[$model]} NICs of model $model"
                        else
                            model_count[$model]=$((${model_count[$model]} + 1))
                            model_nics[$model]="${model_nics[$model]} $nic"
                            DPRINT $LINENO "For DPFK, found $nic ${model_count[$model]} NICs of model $model"
                        fi
                    else 
                        DPRINT $LINENO "For DPDK, skip $nic of model ${model_nics[$model]} "
                    fi
                done
                
                # Find a model with at least 2 NICs
                local dpdk_model=""
                local dpdk_nics=""
                
                for model in "${!model_count[@]}"; do
                    if [ ${model_count[$model]} -ge 2 ]; then
                        dpdk_model=$model
                        dpdk_nics=${model_nics[$model]}
                        DPRINT $LINENO "For DPDK, total found ${model_count[$model]} NICs of model $model"
                        break
                    fi
                done
                
                # If we found a model with at least 2 NICs, use them for DPDK
                if [ -n "$dpdk_model" ] && [ -n "$dpdk_nics" ]; then
                    # Get the first two NICs of this model
                    dpdk_nic_1=$(echo "$dpdk_nics" | awk '{print $1}')
                    dpdk_nic_2=$(echo "$dpdk_nics" | awk '{print $2}')
                    
                    if [ -z "$REG_DPDK_NIC_1" ]; then
                        REG_DPDK_NIC_1="$dpdk_nic_1"
                        DPRINT $LINENO "Setting REG_DPDK_NIC_1=$REG_DPDK_NIC_1"
                    fi
                    
                    if [ -z "$REG_DPDK_NIC_2" ]; then
                        REG_DPDK_NIC_2="$dpdk_nic_2"
                        DPRINT $LINENO "Setting REG_DPDK_NIC_2=$REG_DPDK_NIC_2"
                    fi
                    
                    # Set DPDK NIC model if not already set
                    if [ -z "$REG_DPDK_NIC_MODEL" ]; then
                        REG_DPDK_NIC_MODEL="$dpdk_model"
                        DPRINT $LINENO "Setting REG_DPDK_NIC_MODEL=$REG_DPDK_NIC_MODEL"
                    fi
                else
                    INFO $LINENO "For DPDK: warning could not find two eligible NICs of the same model"
                    # Tip for remove VFs: oc delete sriovnetworknodepolicy -n openshift-sriov-network-operator --all
                fi
            fi
        else
            exit_error $LINENO "Could not SSH to worker node IP $WORKER_IP"
        fi
    else
        exit_error $LINENO "Could not get IP address for worker node $OCP_WORKER_0"
    fi
fi

}

configure_main

# Configure TREX envs
configure_trex() {
    DPRINT $LINENO "Configuring TREX settings..."
    
    # Set TREX_HOSTS to BM_HOSTS if not defined
    if [ -z "$TREX_HOSTS" ]; then
        TREX_HOSTS="$BM_HOSTS"
        DPRINT $LINENO "Setting TREX_HOSTS=$TREX_HOSTS"
    fi
    
    # Use SRIOV interfaces for TREX if not defined
    if [ -z "$TREX_SRIOV_INTERFACE_1" ] && [ -n "$REG_DPDK_NIC_1" ]; then
        TREX_SRIOV_INTERFACE_1="$REG_DPDK_NIC_1"
        DPRINT $LINENO "Setting TREX_SRIOV_INTERFACE_1=$TREX_SRIOV_INTERFACE_1"
    fi
    
    if [ -z "$TREX_SRIOV_INTERFACE_2" ] && [ -n "$REG_DPDK_NIC_2" ]; then
        TREX_SRIOV_INTERFACE_2="$REG_DPDK_NIC_2"
        DPRINT $LINENO "Setting TREX_SRIOV_INTERFACE_2=$TREX_SRIOV_INTERFACE_2"
    fi
    # Set TREX DPDK model to match our DPDK NIC model
    if [ -z "$TREX_DPDK_NIC_MODEL" ] && [ -n "$REG_DPDK_NIC_MODEL" ]; then
        TREX_DPDK_NIC_MODEL="$REG_DPDK_NIC_MODEL"
        DPRINT $LINENO "Setting TREX_DPDK_NIC_MODEL=$TREX_DPDK_NIC_MODEL"
    fi

    # Set auto initialize DPDK remote host
    if [ -z "$REM_DPDK_CONFIG" ] && [ -n "$REG_DPDK_NIC_MODEL" ]; then
        REM_DPDK_CONFIG="false"
        DPRINT $LINENO "Setting REM_DPDK_CONFIG=$REM_DPDK_CONFIG"
    fi

}

configure_trex

# Update lab.config file
DPRINT $LINENO "Updating $LAB_CONFIG..."

# Create backup
cp "$LAB_CONFIG" "${LAB_CONFIG}.bak"

# Function to update or add a variable in the config file
update_config_var() {
    local var_name="$1"
    local var_value="$2"
    local config_file="$3"

    INFO $LINENO "Updating $var_name to \"$var_value\""
    
    # Check if variable exists in the file
    if grep -q "^[[:space:]]*$var_name[[:space:]]*=" "$config_file"; then
        # Variable exists, update it
        sed -i "s|^[[:space:]]*$var_name[[:space:]]*=.*|$var_name=\"$var_value\"|" "$config_file"
    else
        # Variable doesn't exist, add it
        echo "$var_name=\"$var_value\"" >> "$config_file"
    fi
}

{ cat <<EOF
# This file was completed by reg-smart-config
# 
EOF
cat ./lab.config; } > ./lab.config.new && mv ./lab.config.new ./lab.config

# Update all variables
update_config_var "BM_HOSTS" "$BM_HOSTS" "$LAB_CONFIG"
update_config_var "OCP_WORKER_0" "$OCP_WORKER_0" "$LAB_CONFIG"
update_config_var "OCP_WORKER_1" "$OCP_WORKER_1" "$LAB_CONFIG"
update_config_var "OCP_WORKER_2" "$OCP_WORKER_2" "$LAB_CONFIG"
update_config_var "REG_SRIOV_NIC" "$REG_SRIOV_NIC" "$LAB_CONFIG"
update_config_var "REG_SRIOV_MTU" "$REG_SRIOV_MTU" "$LAB_CONFIG"
update_config_var "REG_SRIOV_NIC_MODEL" "$REG_SRIOV_NIC_MODEL" "$LAB_CONFIG"
update_config_var "REG_MACVLAN_NIC" "$REG_MACVLAN_NIC" "$LAB_CONFIG"
update_config_var "REG_MACVLAN_MTU" "$REG_MACVLAN_MTU" "$LAB_CONFIG"
update_config_var "REG_DPDK_NIC_1" "$REG_DPDK_NIC_1" "$LAB_CONFIG"
update_config_var "REG_DPDK_NIC_2" "$REG_DPDK_NIC_2" "$LAB_CONFIG"
update_config_var "REG_DPDK_NIC_MODEL" "$REG_DPDK_NIC_MODEL" "$LAB_CONFIG"
update_config_var "TREX_HOSTS" "$TREX_HOSTS" "$LAB_CONFIG"
update_config_var "TREX_SRIOV_INTERFACE_1" "$TREX_SRIOV_INTERFACE_1" "$LAB_CONFIG"
update_config_var "TREX_SRIOV_INTERFACE_2" "$TREX_SRIOV_INTERFACE_2" "$LAB_CONFIG"
update_config_var "TREX_DPDK_NIC_MODEL" "$TREX_DPDK_NIC_MODEL" "$LAB_CONFIG"
update_config_var "REM_DPDK_CONFIG" "false" "$LAB_CONFIG"

DPRINT $LINENO "Updated $LAB_CONFIG successfully. Backup saved as ${LAB_CONFIG}.bak"

#EOF

